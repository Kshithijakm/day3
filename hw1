import numpy as np

# Corrected weights
w_1 = np.array([[2, -2, 2, 4],
                [-1, 2, -3, 1],
                [3, -2, -1, 5]])  # shape (3, 4)

w_2 = np.array([[3, 1, -2, 1],
                [-2, 4, 1, -4],
                [-1, -3, 2, -5],
                [3, 1, 1, 1]])     # shape (4, 4)

w_3 = np.array([[-1, 3, -2],
                [1, -1, -3],
                [3, -2, 2],
                [1, 2, 1]])         # shape (4, 3)

# Input matrix (7 samples Ã— 3 features)
x_mat_in = np.array([[0.5, 0.8, 0.2],
                     [0.1, 0.9, 0.6],
                     [0.2, 0.2, 0.3],
                     [0.6, 0.1, 0.9],
                     [0.6, 0.5, 0.4],
                     [0.9, 0.1, 0.9],
                     [0.1, 0.8, 0.7]])

# Functions
def relu(x):
    return np.maximum(0, x)

def soft_max_mat(mat):
    exp_mat = np.exp(mat - np.max(mat, axis=1, keepdims=True))
    return exp_mat / np.sum(exp_mat, axis=1, keepdims=True)

def forward_layer(x, w, activation=relu):
    return activation(np.dot(x, w))

def forward_pass(x_input, w1, w2, w3):
    h1 = forward_layer(x_input, w1)
    h2 = forward_layer(h1, w2)
    out = np.dot(h2, w3)
    return soft_max_mat(out)

# Run forward pass
output = forward_pass(x_mat_in, w_1, w_2, w_3)
print("Predicted Output Probabilities:")
print(output)
